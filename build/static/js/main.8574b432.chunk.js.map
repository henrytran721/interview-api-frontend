{"version":3,"sources":["logo.svg","components/Question.jsx","components/Interviews.jsx","components/Dashboard.jsx","components/DetailedInterview.jsx","components/Schedule.jsx","components/DeleteInterview.jsx","components/Password.jsx","components/UpdateInterview.jsx","App.js","reportWebVitals.js","index.js"],"names":["Question","setData","questionData","index","setQuestionData","interviewData","questionType","useRef","questionBox","responseBox","notesBox","scoreInput","questionContainer","error","useState","question","setQuestion","response","setResponse","notes","setNotes","score","setScore","saved","setSaved","handleChange","e","operation","target","value","useEffect","length","className","id","ref","type","placeholder","name","rows","cols","onChange","max","onClick","current","readOnly","style","border","disabled","parseInt","console","log","data","date","Date","textContent","i","Interviews","counter","setCounter","interviewer","setInterviewer","interviewee","setInterviewee","shortid","generate","handlePassedData","class","href","xmlns","width","height","viewBox","stroke-width","stroke","fill","stroke-linecap","stroke-linejoin","d","points","Array","map","item","update","prevState","JSON","stringify","axios","post","then","res","window","location","Dashboard","initialState","setIntialState","loggedIn","setLoggedIn","localStorage","getItem","get","interview","toString","slice","DetailedInterview","setId","url","split","cx","cy","r","x1","y1","x2","y2","x","y","rx","Schedule","view","setView","isToday","setIsToday","schedule","setSchedule","setDate","calendar","selectView","getInstance","getDate","_date","currentView","selected","today","prev","next","calendars","color","bgColor","dragBgColor","borderColor","useDetailPopup","useCreationPopup","onBeforeCreateSchedule","scheduleData","newSchedule","String","Math","random","title","start","toDate","calendarId","end","isVisible","category","isAllDay","createSchedules","onBeforeDeleteSchedule","deleteSchedule","schedules","timezones","timezoneOffset","displayLabel","tooltip","DeleteInterview","input","setInput","correctId","delete","Password","pass","setPass","handleSubmit","setItem","listener","event","code","document","addEventListener","removeEventListener","src","handleInput","UpdateInterview","setInterviewData","put","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8574b432.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useRef, useEffect } from 'react';\r\nimport '../sass/index.scss';\r\n\r\nconst Question = function({setData, questionData, index, setQuestionData, interviewData}) {\r\n    const questionType = useRef(null);\r\n    const questionBox = useRef(null);\r\n    const responseBox = useRef(null);\r\n    const notesBox = useRef(null);\r\n    const scoreInput = useRef(null);\r\n    const questionContainer = useRef(null);\r\n    const error = useRef(null);\r\n    const [question, setQuestion] = useState('');\r\n    const [response, setResponse] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n    const [score, setScore] = useState('');\r\n    const [saved, setSaved] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if(interviewData && index < interviewData.length) {\r\n            setQuestion(interviewData[index].question)\r\n            setResponse(interviewData[index].response)\r\n            setNotes(interviewData[index].notes)\r\n            setScore(interviewData[index].score)\r\n            setQuestionData(interviewData);\r\n        }\r\n    }, [])\r\n\r\n    function handleSave() {\r\n        let current = parseInt(questionContainer.current.id, 10);\r\n        console.log(questionData.length, current);\r\n        if(!question.length || !response.length || !notes.length) {\r\n            error.current.textContent = 'Entry is empty, please enter some text';\r\n            questionBox.current.style.border = '2px solid red';\r\n            responseBox.current.style.border = '2px solid red';\r\n            notesBox.current.style.border = '2px solid red';\r\n        } else if(current === questionData.length) {\r\n            let type = questionType.current.value;\r\n            let data = {id: questionData.length, type: type, question: question, response: response, notes: notes, date: new Date(), score: score};\r\n            setData(data);\r\n            console.log(questionData);\r\n            questionBox.current.readOnly = true;\r\n            questionBox.current.style.border = '2px solid green';\r\n            responseBox.current.readOnly = true;\r\n            responseBox.current.style.border = '2px solid green';\r\n            notesBox.current.readOnly = true;\r\n            notesBox.current.style.border = '2px solid green';\r\n            questionType.current.disabled = true;\r\n            error.current.textContent = '';\r\n            setSaved(true);\r\n        } else {\r\n            setQuestion(questionBox.current.value);\r\n            setResponse(responseBox.current.value);\r\n            setNotes(notesBox.current.value);\r\n            let type = questionType.current.value;\r\n            let data = {id: index, type: type, question: question, response: response, notes: notes, score: score};\r\n            console.log(data);\r\n            for(let i = 0; i < questionData.length; i++) {\r\n                if(questionData[i].id === current) {\r\n                    data.date = questionData[i].date;\r\n                    questionData[i] = data;\r\n                }\r\n            }\r\n\r\n            questionBox.current.readOnly = true;\r\n            questionBox.current.style.border = '2px solid green';\r\n            responseBox.current.readOnly = true;\r\n            responseBox.current.style.border = '2px solid green';\r\n            notesBox.current.readOnly = true;\r\n            notesBox.current.style.border = '2px solid green';\r\n            questionType.current.disabled = true;\r\n            error.current.textContent = '';\r\n\r\n            setSaved(true);\r\n        }\r\n    }\r\n\r\n    function handleUpdate() {\r\n        let type = questionType.current.value;\r\n        setSaved(false);\r\n        questionBox.current.readOnly = false;\r\n        questionBox.current.style.border = '2px solid orange';\r\n        responseBox.current.readOnly = false;\r\n        responseBox.current.style.border = '2px solid orange';\r\n        notesBox.current.readOnly = false;\r\n        notesBox.current.style.border = '2px solid orange';\r\n        questionType.current.disabled = false;\r\n    }\r\n\r\n    function handleChange(e, operation) {\r\n        operation(e.target.value);\r\n    }\r\n    return (\r\n        <div className='question-container' id={index} ref={questionContainer}>\r\n            <select ref={questionType}>\r\n                <option value='conversational'>Conversational</option>\r\n                <option value='conceptual'>Conceptual</option>\r\n                <option value='technical'>Technical</option>\r\n            </select>\r\n            <textarea type='text' placeholder='Enter your question' name='question' rows=\"4\" cols=\"50\" ref={questionBox} value={question} onChange={(e) => handleChange(e, setQuestion)}></textarea>\r\n            <textarea type='text' placeholder='Enter their response' name='response' rows=\"4\" cols=\"50\" ref={responseBox} value={response} onChange={(e) => handleChange(e, setResponse)}></textarea>\r\n            <textarea type='text' placeholder='Enter your notes for this question' name='notes' rows=\"4\" cols=\"50\" ref={notesBox} value={notes} onChange={(e) => handleChange(e, setNotes)}></textarea>\r\n            <input type=\"number\" max=\"5\" onChange={(e) => handleChange(e, setScore)} value={score} ref={scoreInput} />\r\n            {!saved ? <button className='saved-btn' onClick={handleSave}>Save</button> : <button className='update-btn' onClick={handleUpdate}>Update</button>}\r\n            <p className='errorMsg' ref={error}></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","import React, { useState, useRef, useEffect } from 'react';\r\nimport Question from './Question';\r\nimport '../sass/index.scss';\r\nimport axios from 'axios';\r\nimport shortid from 'shortid';\r\n\r\nconst Interviews = function () {\r\n    const [questionData, setQuestionData] = useState([]);\r\n    const [counter, setCounter] = useState(0);\r\n    const [interviewer, setInterviewer] = useState('');\r\n    const [interviewee, setInterviewee] = useState('');\r\n    const [id] = useState(shortid.generate());\r\n    let questionContainer = useRef(null);\r\n\r\n    function addQuestion() {\r\n        let question = questionContainer.current;\r\n        setCounter((prevState) => prevState + 1);\r\n    }\r\n\r\n    function handlePassedData(data) {\r\n        setQuestionData([...questionData, data]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(questionData);\r\n    }, [questionData])\r\n\r\n    function handleChange(e, operation) {\r\n        operation(e.target.value);\r\n    }\r\n\r\n    // tied to complete interview btn\r\n    function handleSubmit() {\r\n        // pack the data to be sent over to backend api\r\n        let data = {id: id, interviewee: interviewee, date: new Date(), interviewer: interviewer, questionData: questionData}\r\n        console.log(JSON.stringify(data));\r\n        axios.post('https://horsefields.wl.r.appspot.com/api/interview', data)\r\n        // complete async post request then redirect user to detailed interview page\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            window.location = `https://horsefields.wl.r.appspot.com/interviews/${res.data.id}`\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='interview-container'>\r\n            <div class='interview-nav'>\r\n                <a className='home-btn' href='/dashboard'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-home\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    <polyline points=\"5 12 3 12 12 3 21 12 19 12\" />\r\n                    <path d=\"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7\" />\r\n                    <path d=\"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6\" />\r\n                    </svg>\r\n                </a>\r\n            </div>\r\n            <h1>Create an Interview</h1>\r\n            <form>\r\n                <div>\r\n                <label>Interviewer</label>\r\n                <input type = 'text' name='interviewer' placeholder='Interviewer Name' value={interviewer} onChange={(e) => handleChange(e, setInterviewer)} />\r\n                </div>\r\n                <div>\r\n                <label>Interviewee</label>\r\n                <input type = 'text' name='interviewee' placeholder='Interviewee Name' value={interviewee} onChange={(e) => handleChange(e, setInterviewee)} />\r\n                </div>\r\n            </form>\r\n            <div className='question-box' ref={questionContainer}>\r\n                {[...Array(counter)].map((item, index) => <Question key={index} setData={handlePassedData} setQuestionData={setQuestionData} index={index} questionData={questionData} update={false} />)}\r\n            </div>\r\n            <div className='btns'>\r\n            <button className='add-btn' onClick={addQuestion}>Add question</button>\r\n            <button className='completed-btn' onClick={handleSubmit}>Complete Interview</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Interviews;","import React, { useState, useEffect } from 'react';\r\nimport '../sass/index.scss';\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = () => {\r\n    const [initialState, setIntialState] = useState([])\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    useEffect(() => {\r\n        let logged = localStorage.getItem('horsefield');\r\n        if(logged) {\r\n            setLoggedIn(true);\r\n        }\r\n        axios.get('https://horsefields.wl.r.appspot.com/api/interviews')\r\n        .then((res) => setIntialState(res.data));\r\n        console.log(initialState);\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='dashboard-container'>\r\n            {loggedIn ? \r\n            <div>\r\n                <h1 className='interview-header'>Horse Field Interviews</h1>\r\n                <div className='interview-nav_home'>\r\n                <a className='create-interview-btn' href='/interviews'>Create Interview</a>\r\n                <a className='create-interview-btn' href='/schedule'>Schedule</a>\r\n                </div>\r\n                <div class='dash-interview-container'>\r\n                {initialState.map((interview, id) => {\r\n                return (\r\n                <a className='interview-card' key={id} href={`/interviews/` + interview.id}>\r\n                <p>Interviewee: {interview.interviewee}</p>\r\n                <p>Interviewer: {interview.interviewer}</p>\r\n                <p>{interview.date.toString().slice(0, 10)}</p>\r\n                </a>\r\n                )\r\n                })}\r\n                </div>\r\n            </div> \r\n            : <div>You do not have access to this page</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../sass/index.scss';\r\n\r\nconst DetailedInterview = () => {\r\n    const initialState = {\r\n        id: \"utgt-JfIs3\",\r\n        interviewee: \"\",\r\n        date: \"2021-03-03T01:36:13.895Z\",\r\n        interviewer: \"\",\r\n        questionData: [\r\n            {\r\n                id: 0,\r\n                type: \"conversational\",\r\n                question: \"'What is a binary search tree?'\",\r\n                response: \"A binary search tree is a tree data structure that starts with a root and can have at most two children. Children to the left of the parent are less than the parent and children to the right of the parent are greater than the parent\",\r\n                notes: \"Good understanding of binary search tree\",\r\n                date: \"2021-03-03T01:36:08.767Z\",\r\n                score: \"3\"\r\n            },\r\n            {\r\n                id: 1,\r\n                type: \"conversational\",\r\n                question: 'What is a linked list?', \r\n                response: 'A linked list is a data structure of nodes attached together with a next pointer, good for inserting and removal at the beginning and end of the list O(1) time',\r\n                notes: 'Good understanding of linked list',\r\n                date: \"2021-03-03T01:36:12.353Z\",\r\n                score: \"1\"\r\n            }\r\n        ]\r\n}\r\n    const [data, setData] = useState(initialState);\r\n    const [id, setId] = useState('');\r\n    useEffect(() => {\r\n        let url = window.location.href.split('/');\r\n        let id = url[url.length - 1];\r\n        setId(id);\r\n        \r\n        axios.get(`https://horsefields.wl.r.appspot.com/api/interview/${id}`)\r\n        .then((res) => {\r\n            setData(res.data);\r\n            console.log(data);\r\n        })\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div class='interview-nav'>\r\n                <a className='home-btn' href='/dashboard'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-home\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    <polyline points=\"5 12 3 12 12 3 21 12 19 12\" />\r\n                    <path d=\"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7\" />\r\n                    <path d=\"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6\" />\r\n                    </svg>\r\n                </a>\r\n                <a href='create-btn' href='/interviews/'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-circle-plus\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n                    <line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\" />\r\n                    <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"15\" />\r\n                    </svg>\r\n                </a>\r\n                <a href='schedule-btn' href='/schedule/'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-calendar-event\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    <rect x=\"4\" y=\"5\" width=\"16\" height=\"16\" rx=\"2\" />\r\n                    <line x1=\"16\" y1=\"3\" x2=\"16\" y2=\"7\" />\r\n                    <line x1=\"8\" y1=\"3\" x2=\"8\" y2=\"7\" />\r\n                    <line x1=\"4\" y1=\"11\" x2=\"20\" y2=\"11\" />\r\n                    <rect x=\"8\" y=\"15\" width=\"2\" height=\"2\" />\r\n                    </svg>\r\n                </a>\r\n            </div>\r\n            <h1>Interviewee: {data.interviewee}</h1>\r\n            <h1>Interviewer: {data.interviewer}</h1>\r\n            <p>{data.date.toString().slice(0, 10)}</p>\r\n            <div className='interaction-buttons'>\r\n                <a href={`/interview/delete/` + id}>Delete</a>\r\n                <a href={`/interview/update/` + id}>Update</a>\r\n            </div>\r\n            {data.questionData.map((item, index) => {\r\n                return (\r\n                    <div className='detailed-question' key={index}>\r\n                        <h4>{index + 1}. {item.question}</h4>\r\n                        <p className='interview-type'>{item.type}</p>\r\n                        <p>Response: {item.response}</p>\r\n                        <p>Notes: {item.notes}</p>\r\n                        <p className='interview-score'>Score: {item.score} / 5</p>\r\n                        <div className='border-bottom'></div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedInterview;","import React, { useState, useRef, useEffect } from 'react';\r\nimport Calendar from '@toast-ui/react-calendar';\r\nimport 'tui-calendar/dist/tui-calendar.css';\r\nimport moment from 'moment';\r\n\r\n// If you use the default popups, use this.\r\nimport 'tui-date-picker/dist/tui-date-picker.css';\r\nimport 'tui-time-picker/dist/tui-time-picker.css';\r\nimport axios from 'axios';\r\n\r\nconst Schedule = () => {\r\n    const [view, setView] = useState('month');\r\n    const [isToday, setIsToday] = useState('false');\r\n    const [schedule, setSchedule] = useState([]);\r\n    const [date, setDate] = useState('');\r\n    const calendar = useRef(null);\r\n    const selectView = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setDate(calendar.current.getInstance().getDate()._date)\r\n        axios.get('https://horsefields.wl.r.appspot.com/api/schedule')\r\n        .then((res) => {\r\n            setSchedule(res.data);\r\n        })\r\n    }, [])\r\n\r\n\r\n    function changeView() {\r\n        let currentView = selectView.current.value;\r\n        if(currentView === 'daily') {\r\n            setView(\"day\");\r\n        } else if(currentView === 'weekly') {\r\n            setView(\"week\")\r\n        } else {\r\n            setView(\"month\")\r\n        }\r\n    }\r\n\r\n    function handlePrev() {\r\n        calendar.current.getInstance().prev();\r\n        setDate(calendar.current.getInstance().getDate()._date)\r\n    }\r\n\r\n    function handleNext() {\r\n        calendar.current.getInstance().next();\r\n        setDate(calendar.current.getInstance().getDate()._date)\r\n    }\r\n\r\n    function handleToday() {\r\n        if(!isToday) {\r\n            setView(\"day\");\r\n            calendar.current.getInstance().today();\r\n            setIsToday(true);\r\n        } else {\r\n            setView(\"month\");\r\n            setIsToday(false);\r\n        }\r\n    }\r\n\r\n    function onBeforeCreateSchedule(scheduleData) {\r\n\r\n        const newSchedule = {\r\n            id: String(Math.random()),\r\n            title: scheduleData.title,\r\n            start: scheduleData.start.toDate(),\r\n            calendarId: \"0\",\r\n            end: scheduleData.end.toDate(),\r\n            bgColor: \"purple\",\r\n            isVisible: true,\r\n            category: scheduleData.isAllDay ? \"allday\" : \"time\",\r\n            location: scheduleData.location,\r\n        }\r\n        console.log(newSchedule)\r\n\r\n        axios.post('https://horsefields.wl.r.appspot.com/api/schedule', newSchedule)\r\n        .then((res) => {\r\n            console.log(res.data);\r\n        })\r\n        calendar.current.getInstance().createSchedules([newSchedule]);\r\n\r\n        // if(schedule) {\r\n        //     setSchedule([...schedule, newSchedule])\r\n        // } else {\r\n        //     setSchedule([schedule])\r\n        // }\r\n    }\r\n\r\n    function onBeforeDeleteSchedule(res) {\r\n        console.log(res.schedule);\r\n        const {id, calendarId} = res.schedule;\r\n        calendar.current.getInstance().deleteSchedule(id, calendarId);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <div class='interview-nav'>\r\n            <a className='home-btn' href='/dashboard'>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-home\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <polyline points=\"5 12 3 12 12 3 21 12 19 12\" />\r\n                <path d=\"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7\" />\r\n                <path d=\"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6\" />\r\n                </svg>\r\n            </a>\r\n            <a href='create-btn' href='/interviews/'>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-circle-plus\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n                <line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\" />\r\n                <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"15\" />\r\n                </svg>\r\n            </a>\r\n        </div>\r\n        <h1>Schedule</h1>\r\n        <nav>\r\n      <select id=\"view-select\" ref={selectView} onChange={changeView}>\r\n        <option value=\"daily\">Daily</option>\r\n        <option value=\"weekly\">Weekly</option>\r\n        <option value=\"monthly\" selected=\"selected\">Monthly</option>\r\n      </select>\r\n      <button id=\"today-btn\" onClick={handleToday}>Today</button>\r\n      <div class=\"nav-btn\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-chevron-left\"\r\n          width=\"44\"\r\n          height=\"44\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#2c3e50\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          id=\"prev\"\r\n          onClick={handlePrev}\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <polyline points=\"15 6 9 12 15 18\" />\r\n        </svg>\r\n        <p id=\"current-date\">{date.toString().slice(0, 15)}</p>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-chevron-right\"\r\n          width=\"44\"\r\n          height=\"44\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#2c3e50\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          onClick={handleNext}\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <polyline points=\"9 6 15 12 9 18\" />\r\n        </svg>\r\n      </div>\r\n    </nav>\r\n        <Calendar \r\n            height=\"900px\"\r\n            calendars={[\r\n                {\r\n                  id: '0',\r\n                  name: 'Interviews',\r\n                  color: '#ffffff',\r\n                  bgColor: '#9e5fff',\r\n                  dragBgColor: \"#9e5fff\",\r\n                  borderColor: '#9e5fff'\r\n                },\r\n            ]}\r\n            view={view}\r\n            ref={calendar}\r\n            useDetailPopup={true}\r\n            useCreationPopup={true}\r\n            onBeforeCreateSchedule={onBeforeCreateSchedule}\r\n            onBeforeDeleteSchedule={onBeforeDeleteSchedule}\r\n            schedules={schedule}\r\n            timezones={[\r\n                {\r\n                  timezoneOffset: -420,\r\n                  displayLabel: 'GMT-08:00',\r\n                  tooltip: 'Los Angeles'\r\n                }\r\n            ]}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Schedule;","import axios from 'axios';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\n\r\nconst DeleteInterview = () => {\r\n    const [id, setId] = useState('');\r\n    const [input, setInput] = useState('');\r\n    const correctId = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let url = window.location.href.split('/');\r\n        let id = url[url.length - 1];\r\n        setId(id);\r\n        console.log(id);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(input !== id && input.length > 0) {\r\n            correctId.current.style.border = '2px solid red';\r\n        } else if(input === id) {\r\n            correctId.current.style.border = '2px solid green';\r\n        } else {\r\n            correctId.current.style.border = '2px solid black';\r\n        }\r\n    }, [input])\r\n\r\n    function handleChange(e) {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    function handleDelete() {\r\n        if(input === id) {\r\n            axios.delete(`https://horsefields.wl.r.appspot.com/api/interview/${id}`)\r\n            .then(() => {\r\n                window.location = '/dashboard';\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Delete interview: {id} ?</h1>\r\n            <div className='delete-interaction'>\r\n                <label>Please enter id in order to be deleted</label>\r\n                <input type='text' placeholder='Enter' value={input} onChange={(e) => handleChange(e)} ref={correctId} />\r\n                <button onClick={handleDelete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteInterview;","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Password = () => {\r\n    const [pass, setPass] = useState('');\r\n    let error = useRef(null);\r\n\r\n    function handleInput(e) {\r\n        setPass(e.target.value);\r\n        error.current.textContent = ''\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        let demonstrable = 'demonstrable';\r\n        if(demonstrable === pass) {\r\n            window.location = '/dashboard';\r\n            localStorage.setItem('horsefield', true);\r\n        } else {\r\n            error.current.textContent = 'Wrong password, please try again.'\r\n            error.current.style.color = 'red'\r\n        }\r\n    }\r\n\r\n    useEffect((e) => {\r\n        const listener = (event) => {\r\n            if(event.code === 'Enter') {\r\n                handleSubmit();\r\n            }\r\n        }\r\n        document.addEventListener(\"keydown\", listener);\r\n        return () => {\r\n          document.removeEventListener(\"keydown\", listener);\r\n        }; \r\n    })\r\n    return (\r\n        <div className='password-container'>\r\n            <div className='password-intro'>\r\n                <h1>Welcome to Horse Field Interviews</h1>\r\n                <img src='https://broncoathletics.com/images/logos/site/site.png' />\r\n                <div>\r\n                <p>Horses Field Interviews is a web application that serves the purpose of conducting mock interviews with friends.</p>\r\n                <p>Be better prepared for your next interview by recording your questions, responses, and notes.</p>\r\n                <p>We give you the ability to review your interviews and gain feedback on areas of improvement!</p>\r\n                </div>\r\n            </div>\r\n            <div className='password-entry'>\r\n                <h1>Please enter password</h1>\r\n                <div className='password-div'>\r\n                    <input type='password' placeholder='Password' value={pass} onChange={(e) => handleInput(e)}/>\r\n                    <button className='password-btn' type='submit' onClick={handleSubmit}>Submit</button>\r\n                    <p ref={error}></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Password;","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Question from './Question';\r\n\r\nconst UpdateInterview = () => {\r\n    const [questionData, setQuestionData] = useState([]);\r\n    const [counter, setCounter] = useState(0);\r\n    const [interviewer, setInterviewer] = useState('');\r\n    const [interviewee, setInterviewee] = useState('');\r\n    const [interviewData, setInterviewData] = useState({});\r\n    const [id, setId] = useState('');\r\n    let questionContainer = useRef(null);\r\n\r\n    function addQuestion() {\r\n        let question = questionContainer.current;\r\n        setCounter((prevState) => prevState + 1);\r\n    }\r\n\r\n    function handlePassedData(data) {\r\n        setQuestionData([...questionData, data]);\r\n    }\r\n\r\n    function handleChange(e, operation) {\r\n        operation(e.target.value);\r\n    }\r\n\r\n    function handleUpdate() {\r\n        // pack the data to be sent over to backend api\r\n        let data = {id: interviewData.id, interviewee: interviewee, date: interviewData.date, interviewer: interviewer, questionData: questionData}\r\n\r\n        axios.put(`https://horsefields.wl.r.appspot.com/api/interview/${id}`, data)\r\n        // complete async post request then redirect user to detailed interview page\r\n        .then((res) => {\r\n            window.location = `https://horsefields.wl.r.appspot.com/interviews/${id}`\r\n        });\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        let url = window.location.href.split('/');\r\n        let id = url[url.length - 1];\r\n        setId(id);\r\n        \r\n        axios.get(`https://horsefields.wl.r.appspot.com/api/interview/${id}`)\r\n        .then((res) => {\r\n            setInterviewData(res.data);\r\n            setCounter(res.data.questionData.length);\r\n            setInterviewer(res.data.interviewer);\r\n            setInterviewee(res.data.interviewee);\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='interview-container'>\r\n        <div class='interview-nav'>\r\n            <a className='home-btn' href='/dashboard'>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-home\" width=\"44\" height=\"44\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <polyline points=\"5 12 3 12 12 3 21 12 19 12\" />\r\n                <path d=\"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7\" />\r\n                <path d=\"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6\" />\r\n                </svg>\r\n            </a>\r\n        </div>\r\n        <h1>Update Interview: {id}</h1>\r\n        <form>\r\n            <div>\r\n            <label>Interviewer</label>\r\n            <input type = 'text' name='interviewer' placeholder='Interviewer Name' value={interviewer} onChange={(e) => handleChange(e, setInterviewer)} />\r\n            </div>\r\n            <div>\r\n            <label>Interviewee</label>\r\n            <input type = 'text' name='interviewee' placeholder='Interviewee Name' value={interviewee} onChange={(e) => handleChange(e, setInterviewee)} />\r\n            </div>\r\n        </form>\r\n        <div className='question-box' ref={questionContainer}>\r\n            {[...Array(counter)].map((item, index) => <Question key={index} setData={handlePassedData} setQuestionData={setQuestionData} index={index} questionData={questionData} interviewData={interviewData.questionData} update={true} />)}\r\n        </div>\r\n        <div className='btns'>\r\n        <button className='add-btn' onClick={addQuestion}>Add question</button>\r\n        <button className='completed-btn' onClick={handleUpdate}>Update Interview</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default UpdateInterview;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Interviews from './components/Interviews'\r\nimport Dashboard from './components/Dashboard'\r\nimport DetailedInterview from './components/DetailedInterview'\r\nimport Schedule from './components/Schedule'\r\nimport DeleteInterview from './components/DeleteInterview'\r\nimport Password from './components/Password'\r\nimport UpdateInterview from './components/UpdateInterview'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n        <Route path='/interview/update/:id' component={UpdateInterview} />\r\n          <Route path='/interview/delete/:id' component={DeleteInterview} />\r\n          <Route path='/interviews/:id' component={DetailedInterview} />\r\n          <Route path='/interviews/'>\r\n            <Interviews />\r\n          </Route>\r\n          <Route path='/schedule'>\r\n            <Schedule />\r\n          </Route>\r\n          <Route path='/dashboard'>\r\n            <Dashboard />\r\n          </Route>\r\n          <Route path='/'>\r\n            <Password />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}